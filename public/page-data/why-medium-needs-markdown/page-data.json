{"componentChunkName":"component---src-templates-post-template-js","path":"/why-medium-needs-markdown","result":{"data":{"markdownRemark":{"html":"<p>After making a substantial amount of edits for my last post which totaled 3 months of on and off work, I thought that it would be the perfect time to finally post it on Medium. Medium has always been the one place where many go to read posts about various topics from self-improvement to economics and, the most important of all, software. The platform has manifested itself into a great source of knowledge filled with tutorials, discussions, and opinions from various developers in the industry. If I needed a tutorial on how to set up a microservice architecture deployed to docker and orchestrated with Kubernetes, Medium was bound to have a comprehensive guide on that.</p>\n<p>With such a large and growing community of developers, I thought that importing posts that contained links, images, and code snippets should be a synch given the widespread availability of Markdown. It is the primary markup language on most developer platforms and adoption seems to only be growing over time. Feeling confident that I am now finally done with editing, I simply created a <strong>gist</strong> with the contents of my post and clicked the <strong>import</strong> button. To my surprise, everything came out <strong>wrong</strong>.</p>\n<p>Looking through the post, it seemed that the importer worked correctly at the very beginning of the post. The title, table of contents, and first paragraph looked to be in order. Once it runs into some content written in HTML, things started to get a lot worse.  Links, images, and code snippets ended up disappearing altogether at some parts of the post. What's worse was that the importer was not able to pick up some bullets and numbered list correctly, where it either deleted some of the lines and renumbered them. A sinking feeling hit me as I realize that I had to go through editing the entire post again. This is especially gruesome on really long posts. Additional complications arise with Medium's custom formatting which is incompatible with existing Markdown posts.</p>\n<h3>The Issues</h3>\n<p>Although it may sound like I am just nitpicking here, there are quite a few limitations of the Medium editor that prevents it from reaching its fullest potential. The editor UX seems fine on the surface given the features that it offers, but one will quickly realize the number of <em>gotchas</em> that actually exist within the platform.</p>\n<p><strong>These are the few things that I feel really set Medium back as a platform for publishing:</strong></p>\n<h5>1: Nested Lists</h5>\n<p>When I first tried to convert my blog post, I thought most things would instantly be formatted correctly with only a few things needed to be adjusted here and there. One of the things I like to use to organize my content is to nest lists to create some sort of hierarchy in the information I'm presenting.</p>\n<p>All I got was a big fat <strong>nope</strong>.</p>\n<p>What ended up happening was that anything that contained a nested list was completely stripped out. Sure it can be mostly fixed by copying and pasting the information again, but there is absolutely no option in the editor to offer any means of indentation with the bullet points.</p>\n<p>I'm not the only one who feels that this is a major drawback in the editor itself. Just ask these users:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/Medium?ref_src=twsrc%5Etfw\">@Medium</a> How does one insert nested lists (OLs or ULs) in content? First level is simple. Second level?</p>&mdash; Robert Koritnik (@robertkoritnik) <a href=\"https://twitter.com/robertkoritnik/status/520107363408572416?ref_src=twsrc%5Etfw\">October 9, 2014</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<ul>\n<li>\n<p><a href=\"https://medium.canny.io/feature-requests/p/nested-lists\" target=\"_blank\" rel=\"noopener noreferrer\">Nested List | Feature Request | Medium</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/yabwe/medium-editor/issues/666\" target=\"_blank\" rel=\"noopener noreferrer\">Create list inside of list</a></p>\n<ul>\n<li>Note that this is a discussion on a separate project.</li>\n</ul>\n</li>\n</ul>\n<p>The lack of response to writers who want these features shows you where Medium's priorities really are, which of course, is to paywall more articles.</p>\n<h5>2: Code Embedding</h5>\n<p>With many notable tech blogs hosting their content on Medium such as <strong>Treehouse</strong>, <strong>Basecamp</strong>, <strong>Slack</strong>, <strong>FreeCodeCamp</strong>, <strong>Netflix</strong>, and other publishers and independent writers, it would make sense for Medium to have its own way of embedding and displaying code to readers.</p>\n<p>In fact, Medium does; only if you are fine with settling for a plain un-highlighted gray-black block sitting in the middle of your page.</p>\n<p>This may seem like a small detail, but it makes sifting through large code snippets easier without going somewhat blind. I think it is great that Medium does support the <strong>triple backtick</strong> syntax of starting a code block since 2016, but that only scratches the surface of what code blocks can actually do.</p>\n<p>One solution that many developers and I use is to embed code snippets from other third party services like <strong>Gist</strong>, <strong>Codepen</strong>, and <strong>JSFiddle</strong>. This is <strong>much</strong> better than the existing editor implementation and better than adding images of your code since <strong>Medium does not support alternative text for visually impaired developers.</strong> [1].</p>\n<p>This seems fine, but if you have an existing blog post already written in Markdown, creating a new gist or code snippet on other services becomes a chore that doesn't need to exist in the first place. There are, however, tools like <a href=\"https://markdowntomedium.com/\" target=\"_blank\" rel=\"noopener noreferrer\">this</a> one that creates the code blocks for you, but that ultimately ends up polluting your Gist. The point is, there shouldn't be this many steps in trying to publish blog posts that contain code snippets.</p>\n<h5>3: Images? What Images?</h5>\n<p>As expected, since Medium did not support Markdown, any form of embedding images was completely stripped out after I used the <a href=\"https://medium.com/p/import\" target=\"_blank\" rel=\"noopener noreferrer\">import</a> tool, all the images got stripped out. <em>Wonderful.</em></p>\n<p>The one thing I can do about it is to upload the images one at a time, but this shouldn't even be necessary in the first place.</p>\n<p>This could easily be implemented in the editor if there was support for embedding images by only using the Markdown syntax.</p>\n<p>In addition, the support for captions for images is just simply missing, making it difficult for people who have trouble seeing.</p>\n<h5>4: Tables</h5>\n<p>This is very common in a lot of text editors already where we can easily organize our data in a series of rows and columns. It may require some more work for the Medium team to implement, but things such as embedding tables for data sets, spreadsheets, and calculations are quite important in the developer space.</p>\n<p>At least even in Wordpress, you have the option to embed tables via external plugins. The lack of this feature just makes it feel very limited.</p>\n<h5>5: Limitations in Post Design/Control</h5>\n<p>Now we cannot put Medium at fault for lacking these features. Medium is designed following the ethos of minimalism, but some of that is being stripped away with the addition of new modal dialogs and distractions floating around the article itself. These are a few things that are also quite limiting the platform as a whole:</p>\n<h6>Lack of Interactive Content</h6>\n<p>It is hard to embed visualizations powered by JS libraries like <a href=\"https://d3js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">d3.js</a>. The best you can do on Medium is to just make these screenshots or link your readers to other sites to view your interactive content.</p>\n<p>This greatly limits how much information could actually be presented in Medium itself.</p>\n<h6>Custom HTML/CSS</h6>\n<p>Without being able to add custom HTML, crafting a beautiful blog post without making it look generic starts to become a challenge. The flexibility of styling the page the way you like can be made possible if Markdown was supported. In addition, custom styles would be a huge plus in allowing writers to have more variety in their posts. The one thing, however, is that the HTML must be sanitized before it can be rendered on pages to prevent XSS attacks.</p>\n<h6>Video Embeds</h6>\n<p>The only way to show videos is to link them through <em>YouTube</em> or <em>gfycat</em>. This is still debatable since these platforms do offer quite a bit of flexibility. However, they end up loading a lot of extra dependencies like JS libraries that add bandwidth and loading time. This does not make for a great mobile experience.</p>\n<h3>Benefits of Markdown</h3>\n<p>There is no question that Markdown has seen a dramatic increase in its adoption ever since its inception in 2004. It is widely adopted in many version control sites like <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a> and <a href=\"https://gitlab.com\" target=\"_blank\" rel=\"noopener noreferrer\">Gitlab</a>, messaging platforms like <a href=\"https://slack.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Slack</a>, project management platforms like <a href=\"https://trello.com/en-US\" target=\"_blank\" rel=\"noopener noreferrer\">Trello</a>, static site generators like <a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Gatsby</a> and <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Jekyll</a>, and even note-taking apps like <a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Typora</a>. The list here is <strong>not exhaustive</strong>.</p>\n<p>Many have turned to Markdown in the recent years since it is syntactically simplistic compared to HTML, widely adopted by many tools on the web, and commonly used among marketers and tech teams. </p>\n<p>The barrier to entry, even for professionals who do not program, is substantially lower than any other markup language that exists today. And no, <em>formatting your text in Word does not count</em>. There are no extra words or letters like <code class=\"language-text\">href</code>, <code class=\"language-text\">a</code>, etc. that may be confusing and just irrelevant to a marketer in a sales agency trying to promote their product.</p>\n<p>The syntax to learn is quite small, making the output quite predictable most of the time and a lot less <strong>error prone</strong>. There is no need to fiddle around with styling your elements or trying to make sure that elements are presented correctly. Although some may view this as a downside for Markdown due to its fixed design nature, it is extremely efficient if anyone wanted to create a quick, nicely formatted document to serve as documentation for an application or just taking some quick notes. Its low verbosity means that you can spend less time typing boilerplate and more time on the actual content.</p>\n<p>To appease the technical folk, Markdown allows inline HTML to provide more flexibility in creating different layouts. If there is something that cannot be done in Markdown, you can still write HTML and your parser will understand.</p>\n<p>Like HTML, Markdown documents can be previewed instantly without having to install any other library (<em>cough</em> looking at you <strong>MiKTeX</strong> <em>cough</em>) or running any specific commands. There are a plethora of online editors for both markup languages that would present the content just fine.</p>\n<h3>Solutions?</h3>\n<blockquote>\n<p>Gee Stan, Markdown sure sounds great but there's a problem. How can I easily convert my Markdown posts to Medium?</p>\n</blockquote>\n<p>You see, this has been a big problem that many have solved, or attempted to solve I should say.</p>\n<p>In short, there is no <em>one size fits all</em> converter that could accurately convert all Markdown files into Medium's format without losing a few elements here and there. Below are a couple of ways and tools that other bloggers have taken to bridge the gap.</p>\n<h5>Markdown To Medium</h5>\n<p>This <a href=\"https://markdowntomedium.com/\" target=\"_blank\" rel=\"noopener noreferrer\">tool</a> is perhaps the one that comes closest to preserving all the formatting that you have in your posts. Not only does it automatically import your content, but it also <strong>automatically creates gist</strong> for all of your code snippets to add proper syntax highlighting. This may clutter up your gist collection, but it is a small price to pay for making publishing a blog post so much easier.</p>\n<h5>Medium Editor Markdown</h5>\n<p>This <a href=\"https://ionicabizau.github.io/medium-editor-markdown/example/\" target=\"_blank\" rel=\"noopener noreferrer\">extension</a> to <a href=\"https://yabwe.github.io/medium-editor/\" target=\"_blank\" rel=\"noopener noreferrer\">Medium Editor</a> adds Markdown and HTML editing to render content as seen in Medium. This is great if you want a quick preview on how your post may look by simply pasting your existing Markdown file.</p>\n<h5>Create Your Own Blog</h5>\n<p>It may be a drastic choice, but nonetheless viable. It's a great way to step into the world of static site generators like Gatsby, Hugo, and Jekyll. You will end up getting all the control in terms of how to style your blog, how to code it, and how to deploy it. Earlier this year (2019), <a href=\"https://www.freecodecamp.org/forum/t/we-just-launched-developer-news-heres-how-you-can-use-it/279929\" target=\"_blank\" rel=\"noopener noreferrer\">FreeCodeCamp</a> made the jump in their announcement albeit for other reasons. Nevertheless, they are not the only blog that is moving off of Medium.</p>\n<h3>References</h3>\n<ol>\n<li><a href=\"https://www.freecodecamp.org/news/how-to-add-code-to-medium-and-get-syntax-highlighting-d699761a5883/\" target=\"_blank\" rel=\"noopener noreferrer\">How to display code blocks in Medium</a></li>\n</ol>","timeToRead":9,"fields":{"slug":"/posts/2019-7-4-why-medium-needs-markdown/"},"frontmatter":{"date":"July 04, 2019","path":"/why-medium-needs-markdown","tags":["medium","blogging","markdown","post"],"title":"why medium needs markdown","image":null,"description":"The time for Markdown support on Medium is now."}},"site":{"siteMetadata":{"siteUrl":"https://spiderpig86.github.io"}}},"pageContext":{"slug":"/posts/2019-7-4-why-medium-needs-markdown/","prev":{"node":{"excerpt":"So, you want to learn x86? Well, you've come to the right place!PS: Please excuse the poor drawings. I did my best only having a trackpad for drawing.Table of ContentsThis is by no means an exhaustive guide for all there is to know for x86, but…","html":"<p>So, you want to learn x86? Well, you've come to the right place!</p>\n<blockquote>\n<p>PS: Please excuse the poor drawings. I did my best only having a trackpad for drawing.</p>\n</blockquote>\n<h2>Table of Contents</h2>\n<p>This is by no means an exhaustive guide for all there is to know for x86, but hopefully it will be a comprehensive overview of the most important parts of the language.</p>\n<ol>\n<li><a href=\"#why\">Why?</a>: My reason for writing this in the first place.</li>\n<li><a href=\"#what\">What?</a>: Honestly, what is this?</li>\n<li><a href=\"#components\">Program Components</a>: What are the parts of a typical program?</li>\n<li><a href=\"#instructions\">Instructions</a>: The types of instructions that exist.</li>\n<li><a href=\"#math\">Math</a>: Mathematical operations that can be performed.</li>\n<li><a href=\"#stackops\">Stack Based Operations</a>: Operations that perform push/pop on the stack.</li>\n<li><a href=\"#lea\">Load Effective Address</a>: Loading the value at a given memory address.</li>\n<li><a href=\"#compare\">Compare</a>: Comparison operators for conditionals.</li>\n<li><a href=\"#jump\">Jump</a>: Jump to other parts of a program given a memory address.</li>\n<li><a href=\"#call\">Call</a>: Calling other functions.</li>\n<li><a href=\"#leave\">Leave/Ret</a>: Exit a function call.</li>\n<li><a href=\"#refernces\">References</a>: References I used.</li>\n</ol>\n<h2 id=\"why\">Why?</h2>\n<p>You might be wondering why I would subject myself to torture by trying to learn Assembly in the first place since it's \"either too hard\" or \"it's boring as hell\". Well, you're right, it's definitely not the most interesting thing in the world. Since I'm taking a course of offensive security, I <em>kinda</em> need to at least understand the basics of it -- mainly to understand program disassembling for CTF.</p>\n<p>So far, there aren't too many simple guides on learning x86 online compared to other languages. So hopefully, this will be a quick and easy guide for you to follow to learn the very basics of x86. 😄</p>\n<h2 id=\"what\">What is x86?</h2>\n<p><em>Worse than MIPS</em>. Just kidding. x86 is a variant of <strong>Assembly</strong> that is commonly written for x86-64 processors which are CISC processors (common in most desktop computers today). x86 is more complex than, let's say, MIPS in the sense that it is designed to complete tasks with only a few instructions rather than using more basic instructions <a href=\"#references\">[1]</a>.</p>\n<p>For example, CISC architectures come with a built-in instruction that performs multiplication without breaking it up into a series of smaller instructions. In the RISC approach, multiplication is actually broken up into a series of a few instructions <a href=\"#references\">[2]</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token comment\">; CISC approach</span>\n<span class=\"token comment\">; Imagine if dval1 = 0x5 and dval2 = 0x6</span>\nmov <span class=\"token register variable\">eax</span>, dval1 <span class=\"token comment\">; Move the first value to accumulator</span>\nmul dval2 <span class=\"token comment\">; Multiply into eax</span></code></pre></div>\n<p>In the RISC approach, it is broken up into a series of other steps.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">LOAD A, <span class=\"token number\">2</span>\nLOAD B, <span class=\"token number\">3</span>\nPROD A, B\nSTORE A, RES</code></pre></div>\n<h2 id=\"components\">Program Components</h2>\n<p>Before we get started with the x86 language, first we must understand the main sections of a program written in C. This will be a very brief guide since there is plenty of info online. Note that what I will be talking about is the 32-bit variant of the x86 architecture.</p>\n<h3>Heap</h3>\n<p>The <strong>heap</strong> is a section of <strong>unmanaged</strong> memory (in Java, there's GC so technically it is managed there) that is allocated by the operating system. The OS uses the <code class=\"language-text\">sysbrk</code> syscall to allocate memory from the requesting function. Unlike the stack, memory is not invalidated when the function returns which leads to memory leaks. To avoid this, in C you would release memory with <code class=\"language-text\">free()</code> after a call to <code class=\"language-text\">malloc()</code> or one of its variants. The eap grows <strong>upward</strong> towards higher memory addresses.</p>\n<h3>Stack</h3>\n<p>This refers to the region of memory that is allocated to the process <strong>primarily to implement functions</strong>. This is managed in the sense that the variables created remain local to the function it resides and is invalidated once the function exits (when the <a href=\"https://en.wikipedia.org/wiki/Stack_register\" target=\"_blank\" rel=\"noopener noreferrer\">stack pointer</a> moves up). The values are still there, but they will be overwritten by the contents of the next function call's <a href=\"https://stackoverflow.com/questions/10057443/explain-the-concept-of-a-stack-frame-in-a-nutshell\" target=\"_blank\" rel=\"noopener noreferrer\">stack frame</a>. Two x86 registers that deal with this are:</p>\n<ul>\n<li><code class=\"language-text\">esp</code> (extended stack pointer) - points to the top of the stack where <code class=\"language-text\">push</code> and <code class=\"language-text\">pop</code> will decrement and increment the stack pointer respectively. <code class=\"language-text\">push</code> adds an element to the top of the stack while <code class=\"language-text\">pop</code> removes the element at the top of the stack.</li>\n<li><code class=\"language-text\">ebp</code> (extended base pointer) - points to the start of the current <strong>stack frame</strong>, which is the space allocated for a function call. The <code class=\"language-text\">call</code> instruction pushes the current instruction pointer onto the stack.</li>\n</ul>\n<p>Note that the stack grows <strong>downward</strong> towards lower memory addresses. This is also where global and static variables are declared.</p>\n<h3 id=\"registers\">Registers</h3>\n<p>These are small storage units located directly in the processor for quick access to intermediate values in function calls. It is known as L0 cache and it is located at the highest level in the <a href=\"https://www.geeksforgeeks.org/memory-hierarchy-design-and-its-characteristics/\" target=\"_blank\" rel=\"noopener noreferrer\">memory hierarchy</a>.</p>\n<p>There are six 32-bit general purpose registers in the x86 architecture <a href=\"#references\">[3]</a>:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">eax</code> (extended accumulator register) - used for storing return values for functions and special register for certain calculations.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">mov <span class=\"token register variable\">eax</span>, <span class=\"token number\">3</span>  <span class=\"token comment\">; Set eax to 3</span>\nret <span class=\"token comment\">; Return</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ebx</code> (extended base register) - often set to commonly used values to speed up calculations.</p>\n</li>\n<li>\n<p><code class=\"language-text\">ecx</code> (extended counter register) - used as a function parameter or a loop counter. Generally used with <em>for loops</em> as the counter.</p>\n</li>\n<li>\n<p><code class=\"language-text\">edx</code> (extended data register) - also used as a function parameter register like <code class=\"language-text\">ecx</code> and storing <strong>short-term variables</strong> within a function.</p>\n</li>\n<li>\n<p><code class=\"language-text\">esi</code> (extended source index register) - register that points to the where the \"source\" is located in memory.</p>\n</li>\n<li>\n<p><code class=\"language-text\">edi</code> (extended data index register) - similar to <code class=\"language-text\">esi</code>, but it points to the destination. </p>\n</li>\n</ul>\n<p><code class=\"language-text\">ebp</code>, <code class=\"language-text\">esp</code>, and <code class=\"language-text\">eip</code> are all known as <strong>reserved</strong> registers.</p>\n<h2 id=\"instructions\">Instructions</h2>\n<h3>Format</h3>\n<p>There are essentially two schools of thought for instruction format: the <strong>AT&#x26;T syntax</strong> and the <strong>Intel syntax</strong>.</p>\n<p>In short, the difference is that for the <strong>AT&#x26;T syntax</strong>, the source register is on the left side and the destination register is on the right side while it is the opposite for the <strong>Intel syntax</strong>.</p>\n<p>Instructions typically follow 2 forms:</p>\n<ul>\n<li><code class=\"language-text\">op arg</code> - there is an operation with only one argument specified.</li>\n<li><code class=\"language-text\">op arg1, arg2</code> - there is an operation with two arguments specified, separated by a comma.</li>\n</ul>\n<p>As an example with the <code class=\"language-text\">mov</code> instruction, it copies the value that is stored by the second argument into the first argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">mov arg1, arg2</code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/x86/x86-add.PNG\" alt=\"syntax\"></p>\n<p>Although it is called <code class=\"language-text\">mov</code>, it actually <strong>copies</strong> instead, meaning that the value stored in <code class=\"language-text\">arg2</code> is actually still there. However, there are some caveats with this specific instruction in general discussed in the next section.</p>\n<h3>Dereferencing</h3>\n<p>The caveat comes when you are trying to get values from the stack.</p>\n<p>When you are trying to get values from the stack, let's say moving a local variable at <code class=\"language-text\">ebp - 12 (0xC)</code> with a value of 42, you would expect that you would get the value that is stored at that location into <code class=\"language-text\">eax</code>. This means that <code class=\"language-text\">eax</code> should have the value of 42 right?</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">mov <span class=\"token register variable\">eax</span>, <span class=\"token register variable\">ebp</span><span class=\"token operator\">-</span><span class=\"token number\">0xC</span></code></pre></div>\n<p><strong>WRONG</strong></p>\n<p><code class=\"language-text\">ebp - 0xC</code> is an address that refers to where 42 is stored in memory. Simply calling <code class=\"language-text\">mov</code> will move that address into <code class=\"language-text\">eax</code>, but not 42. If you know C, you know that we would need to <strong>dereference</strong> a pointer to get the value at that location. In x86, a similar idea also exists where we can think of using the square bracket notation as a dereference operator.</p>\n<p>So to get 42, we would run this:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">mov <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">ebp</span><span class=\"token operator\">-</span><span class=\"token number\">0xC</span><span class=\"token operator\">]</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/x86/x86-deref.PNG\" alt=\"dereferencing\"></p>\n<h2 id=\"math\">Math</h2>\nOf course, x86 supports the basic mathematical operators that you would need to perform more complex computations.\n<p><strong>Addition</strong></p>\n<p>The <code class=\"language-text\">add</code> instruction is a binary operation that adds two given registers with the format <code class=\"language-text\">add arg1, arg2</code> which is the same as <code class=\"language-text\">arg1 = arg1 + arg2</code>. The first and second arguments are summed and stored in the first argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">add <span class=\"token register variable\">eax</span>, <span class=\"token number\">0x5</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/x86/x86-add.PNG\" alt=\"adding\"></p>\n<p>The instruction above adds the value in <code class=\"language-text\">%eax</code> with 5 and stores it back in <code class=\"language-text\">%eax</code>.</p>\n<p><strong>Subtraction</strong></p>\n<p>This is a binary operation that subtracts the second argument from the first: <code class=\"language-text\">sub arg1, arg2</code> is the same as <code class=\"language-text\">arg1 = arg1 - arg2</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">sub <span class=\"token register variable\">esp</span>, <span class=\"token number\">0x4</span></code></pre></div>\n<p>The instruction above moves the stack pointer down 4 bytes.\nThis can also be done by adding a negative value with a lower overhead.</p>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/x86/x86-sub.PNG\" alt=\"subtracting\"></p>\n<p><strong>Multiplication</strong></p>\n<p>Multiplication is a bit more complex since it comes with several varying instructions.\nAlso, its destination register varies depending on the memory size of the value you are multiplying with.</p>\n<p>*Note: The terminology here is different than with other architectures. A <strong>word</strong> is 16 bits (size of the register) and a <strong>doubleword</strong> is 32 bits.*</p>\n<ol>\n<li>\n<p>Multiplying 2 bytes</p>\n<ul>\n<li>This is a common case where we move one of the operands into register <code class=\"language-text\">%AX</code>. Then, we call <code class=\"language-text\">mul &lt;arg2&gt;</code> which would perform <code class=\"language-text\">%AX = %AX * arg2</code>, where <code class=\"language-text\">arg2</code> is some register and <strong>not</strong> an immediate.</li>\n</ul>\n</li>\n<li>\n<p>Multiplying 2 words (16 bits)</p>\n<ul>\n<li>This operation performs multiplication with two 16 bit values.</li>\n<li>The multiplicand, or number being multiplied, is stored in the <code class=\"language-text\">%AX</code> register and the multiplier is a word stored in memory or another register.</li>\n<li>\n<p>The syntax is similar to before, where we call <code class=\"language-text\">mul &lt;arg2&gt;</code> which performs <code class=\"language-text\">%(DX:AX) = %AX &amp; arg2</code>.</p>\n<ul>\n<li>The result is actually stored in two registers. </li>\n</ul>\n</li>\n<li>\n<p>Since this allows for much larger results, the product of two words can result in a doubleword, which means it needs two registers to store the entire result.</p>\n<ul>\n<li><code class=\"language-text\">%DX</code> holds the upper 16 bits of the result while <code class=\"language-text\">%AX</code> holds the bottom 16 bits.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Multiplying 2 doublewords (32 bits)</p>\n<ul>\n<li>The idea is similar here, but we use the <strong>extended</strong> versions of registers such as <code class=\"language-text\">%EAX</code> and <code class=\"language-text\">%EDX</code>.</li>\n<li>This is also called as <code class=\"language-text\">mul &lt;arg2&gt;</code>.</li>\n<li>\n<p>the result of this could be a <code class=\"language-text\">qword</code> or <strong>quadword</strong>, so we would need to use 2 <em>extended</em> registers to store the result.</p>\n<ul>\n<li><code class=\"language-text\">%(EDX:EAX) = %EAX * arg2</code>.</li>\n<li>Both <code class=\"language-text\">%EDX</code> and <code class=\"language-text\">%EAX</code> store 32 bits.</li>\n<li>Like before, <code class=\"language-text\">%EDX</code> stores the upper 32 bits and <code class=\"language-text\">%EAX</code> stores the lower 32 bits.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Of course there is <code class=\"language-text\">imul</code>, which handles <strong>signed multiplication</strong>.</p>\n</li>\n</ol>\n<p><strong>Division</strong></p>\n<p>Like with multiplication, division also has the same rules for dealing with different size divisors</p>\n<ol>\n<li>\n<p>Divisor is 1 byte</p>\n<ul>\n<li>First, we place our dividend (number we are dividing into) in <code class=\"language-text\">%AX</code>.</li>\n<li>The divisor is then another register or memory location we specify that has the divisor, so the operation works like this: <code class=\"language-text\">%AX / arg2</code>.</li>\n<li>The result will be stored in <strong>two</strong> registers: <code class=\"language-text\">%AL</code> and <code class=\"language-text\">%AH</code> which store the quotient and remainder respectively.</li>\n<li>To perform this, call <code class=\"language-text\">div &lt;arg2&gt;</code></li>\n</ul>\n</li>\n<li>\n<p>Divisor is 1 word</p>\n<ul>\n<li>Here, the main difference is that the dividend (32 bits) is placed into the <code class=\"language-text\">%(DX:AX)</code> registers where the upper 16 bits are in <code class=\"language-text\">%DX</code> and the lower 16 bits are in <code class=\"language-text\">%AX</code>.</li>\n<li>After dividing, the 16-bit quotient goes into <code class=\"language-text\">%AX</code> and the 16-bit remainder goes into <code class=\"language-text\">%DX</code></li>\n</ul>\n</li>\n<li>\n<p>Divisor is a doubleword</p>\n<ul>\n<li>The dividend here is assumed to be 64 bits stored along the <code class=\"language-text\">%(EDX:EAX)</code> registers.</li>\n<li>After dividing, the quotient goes into <code class=\"language-text\">%EAX</code> and the remainder goes into <code class=\"language-text\">%EDX</code>.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"stackops\">Stack Based Operations</h2>\n<p>Stack based operators are designed to manipulate registers that correspond with the stack pointer, such as <code class=\"language-text\">%esp</code> and <code class=\"language-text\">%ebp</code>.\nKeep in mind that the stack pointer grows downward in memory, so the \"top\" of the stack is really at the bottom.</p>\n<p><strong>Push</strong></p>\n<ul>\n<li>\n<p>The <code class=\"language-text\">push</code> instruction is designed to put stuff on the top of the stack.</p>\n<ul>\n<li>\n<p>How it accomplishes this is by decrementing <code class=\"language-text\">%esp</code> by 4 bytes (to allocate space for an address on 32 bit systems) and then places the value inside those 4 bytes.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">push &lt;arg&gt;</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Pop</strong></p>\n<ul>\n<li>\n<p>The <code class=\"language-text\">pop</code> instruction is used to pop or remove data from the top of the stack pointed by <code class=\"language-text\">%esp</code>.</p>\n<ul>\n<li>This works by incrementing <code class=\"language-text\">%esp</code> by 4 bytes (on 32 bit systems) and copies the value to the corresponding register.</li>\n<li>\n<p>The actual data isn't cleared itself on the stack, but since the stack pointer is above it, the data will be overwritten the next time the stack pointer goes past there.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pop &lt;register&gt;</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/x86/x86-stack.PNG\" alt=\"stack\"></p>\n<h2 id=\"lea\">Lea</h2>\n<p>This instruction stands for <strong>load effective address</strong>.</p>\n<p>It places the address of the corresponding value specified in the second argument and places it into the register specified by the first argument.</p>\n<p>The instruction was mainly included to add support to higher level languages like C where it wants the address of some value whether they are arrays or structs. It would be equivalent to the <code class=\"language-text\">&amp;</code> operator in C.\nLet's say we have a struct defined in C like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we were to access the z coordinate of an array of <code class=\"language-text\">Points</code> inside some for loop, we would run something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span></code></pre></div>\n<p>In x86, the equivalent statement would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MOV <span class=\"token register variable\">EDX</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">EBX</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span> <span class=\"token operator\">*</span> <span class=\"token register variable\">EAX</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token operator\">]</span></code></pre></div>\n<ul>\n<li>Recall that the <code class=\"language-text\">MOV</code> instruction is used for moving values from the second argument to the first.</li>\n<li>The brackets are used as a <em>dereference</em> operator to get the associated value at that address.</li>\n<li>We are assuming that <code class=\"language-text\">%EBX</code> contains the base address of the array and <code class=\"language-text\">%EAX</code> contains the counter variable.</li>\n<li>Assuming a <strong>4-byte alignment</strong>, we multiply the counter <code class=\"language-text\">%EAX</code> by <code class=\"language-text\">12</code> since the <code class=\"language-text\">Point</code> struct has a size of <code class=\"language-text\">12</code> bytes (from 3 32-bit integers).</li>\n<li>\n<p>The offset to get the <code class=\"language-text\">z</code> variable is <code class=\"language-text\">8</code> bytes since there are 2 preceding integers, <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code>.\nNow that's great for getting the value we want, but what if we just wanted the actual address in memory.\nIn C, the <code class=\"language-text\">&amp;</code> operator comes in handy and we can write something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>The code above will get the address of the <code class=\"language-text\">z</code> varible in the struct and store that in an int pointer <code class=\"language-text\">p</code>.\nBelow is the is the compiled version of the code, where we load the address into register <code class=\"language-text\">%ESI</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">LEA <span class=\"token register variable\">ESI</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">EBX</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span> <span class=\"token operator\">*</span> <span class=\"token register variable\">EAX</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token operator\">]</span></code></pre></div>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/x86/x86-lea.PNG\" alt=\"load effective address\"></p>\n<p><strong>But Stan, Wait!</strong></p>\n<p><em>Can't we just do the same thing by writing <code class=\"language-text\">MOV ESI, EBX + 12 * EAX + 8</code>?</em></p>\n<p>Well no, we cannot. The explanation will become clear after reading a <em>riveting</em> discussion on Stackoverflow spanning 2011 - 2018 <a href=\"#references\">[4]</a>.</p>\n<p>To simply put it, here are the main points of why that is not possible:</p>\n<ol>\n<li>The <code class=\"language-text\">MOV</code> instruction is not designed for just calculating the address of a given memory location. Its job is to <strong>access</strong> whatever value is stored at that address, meaning it actually takes extra time to <strong>read</strong> the contents of that memory location. <code class=\"language-text\">LEA</code> just does the math on the given values.</li>\n<li>It is not valid to perform some form of computation without some brackets or parenthesis.</li>\n<li>Assuming that there is a specialized function for <code class=\"language-text\">MOV</code> that did allow for the line of code above, it would make the syntax less clean. It is subjective, but it is much easier to distinguish loading from memory and calculating an address if you have 2 different instructions.</li>\n</ol>\n<p>There are probably more reasons, but in general, having a dedicated instruction for calculating addresses is a lot cleaner and more optimized than overloading an existing instruction which increases complexity and decreases readability.</p>\n<h2 id=\"compare\">Compare</h2>\n<p>The <code class=\"language-text\">cmp</code> instruction is actually the same as the <code class=\"language-text\">sub</code> instruction  except that instead of storing the result in the first argument, it will set a <strong>flag</strong> in the processor.\nThe instruction can be executed as <code class=\"language-text\">cmp arg1, arg2</code>.</p>\n<p>That <strong>flag</strong> will have these possible values:</p>\n<ol>\n<li><code class=\"language-text\">&lt; 0</code> - <code class=\"language-text\">arg1 &lt; arg2</code></li>\n<li><code class=\"language-text\">0</code> - <code class=\"language-text\">arg1 == arg2</code></li>\n<li><code class=\"language-text\">&gt; 0</code> - <code class=\"language-text\">arg1 &gt; arg2</code></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/x86/x86-cmp.PNG\" alt=\"compare\"></p>\n<p>The <strong>flag</strong> being stored is actually the value of <code class=\"language-text\">arg1 - arg2</code>.\nAs an example, this is how it would work:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">cmp <span class=\"token number\">1</span>, <span class=\"token number\">3</span></code></pre></div>\n<ul>\n<li>This instruction would perform <code class=\"language-text\">1 - 3</code>, setting <code class=\"language-text\">-2</code> inside the flag which tells us that <code class=\"language-text\">arg1 &lt; arg2</code>.</li>\n<li>Keep in mind that this is not really a valid way since we cannot compare 2 immediates directly.</li>\n<li>The first argument is usually a register while the second one can either be an immediate or a register.</li>\n</ul>\n<p>Now there are many other examples of using the <code class=\"language-text\">cmp</code> instruction along with many other acceptable arguments, which can all be found here <a href=\"#references\">[5]</a>.</p>\n<h2 id=\"jump\">Jump</h2>\n<p>Typically when using the <code class=\"language-text\">cmp</code> instruction above, it is followed by a <code class=\"language-text\">jmp</code> or <strong>jump</strong> instruction. This instruction takes in a single argument for the jump address as its parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">jmp addr</code></pre></div>\n<p>The jump will be taken based on the value of the <strong>flag</strong> in the processor. When a jump is taken, the <code class=\"language-text\">eip</code> register is set to that argument. Of course, there are many variants of the jump instruction that change the flow of the program based on the value of the <strong>flag</strong>. The <code class=\"language-text\">jmp</code> instruction shown above is the <strong>unconditional jump</strong>.</p>\n<p>Below is a non-exhaustive list of the different jump instructions that exist. These are mainly the common ones.</p>\n<ul>\n<li><code class=\"language-text\">je</code> (jump equal) - jumps if equal</li>\n<li><code class=\"language-text\">jz</code> (jump zero) - jump if zero</li>\n<li><code class=\"language-text\">jl</code> (jump less) - jump if less</li>\n<li><code class=\"language-text\">jg</code> (jump greater) - jump if greater</li>\n</ul>\n<p>There are plenty more that can be found <a href=\"http://www.unixwiz.net/techtips/x86-jumps.html\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> <a href=\"#references\">[6]</a>.</p>\n<p>Below is an example program written in pseudocode on how it may work. Addresses are on the left and instructions are on the right, assume that the <code class=\"language-text\">eip</code> points to <code class=\"language-text\">addr3</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">addr1 instr1\naddr2 cmp <span class=\"token number\">1</span>, <span class=\"token number\">3</span>\naddr3 jl addr10\naddr4 instr4\n...   ...\naddr10 instr10</code></pre></div>\n<ul>\n<li>Looking at the example above, the jump would be taken to <code class=\"language-text\">addr10</code> since <code class=\"language-text\">1 &lt; 3</code> and we are using <code class=\"language-text\">jl</code>, meaning jump if the first argument is less than the second.</li>\n<li>If we used <code class=\"language-text\">jg</code>, the <code class=\"language-text\">eip</code> would move to <code class=\"language-text\">addr4</code>.</li>\n</ul>\n<p>Now you may have noticed that I used the word <strong>flag</strong> a lot in the last two sections, but what the heck is it?</p>\n<p>The idea of the <strong>FLAGS</strong> register is to serve as a status register that contains the <strong>current state of the processor</strong>. This essentially means that this <code class=\"language-text\">16 bit</code> wide register holds a lot of information as to what is going on in the processor.</p>\n<p>If the entire state of the CPU is stored in a single register, how do we keep track of multiple independent states?</p>\n<p>The idea of using a single register is to save space. Luckily through <strong>bitmasking</strong>, we can specify a specific set of bit(s) to represent the state of a certain piece of information. In short, each flag or state information is mapped to a specific set of bits. Confusing right?</p>\n<p>For example, let's say if we are performing some addition and a carry value has been generated by the ALU, the <strong>carry flag</strong> or <code class=\"language-text\">CF</code> is set to <code class=\"language-text\">1</code> to let us know that this has happened. This <code class=\"language-text\">1</code> is just 1 of the bits in the 16-bit register representing the state. To get the value of <code class=\"language-text\">CF</code> specifically, we use a mask value of <code class=\"language-text\">0x0001</code>, meaning that the <strong>least significant bit</strong> corresponds to the carry flag.</p>\n<p>The most common flags that are seen are typically <code class=\"language-text\">CF</code>, <code class=\"language-text\">ZF</code>, <code class=\"language-text\">OF</code>, <code class=\"language-text\">PF</code> and <code class=\"language-text\">SF</code>. Since this is only a brief overview, you can see a much more detailed breakdown of the x86 flags <a href=\"https://en.wikipedia.org/wiki/FLAGS_register\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> <a href=\"#references\">[7]</a>.</p>\n<p>FLAGS register is not limited to just <code class=\"language-text\">16</code> bits, as some processors have 32-bit and 64-bit register sizes. The 32-bit variant is denoted as EFLAGS while the 64-bit variant is denoted as RFLAGS.</p>\n<h2 id=\"call\">Call</h2>\nPerhaps this is the most important instruction of them all. It is a simple instruction on the surface that takes in a single argument.\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">call <span class=\"token operator\">&lt;</span>func_addr<span class=\"token operator\">></span></code></pre></div>\n<p>This is designed to \"call\" a function in a program or library. When you disassemble your C program, you will notice that calls made to standard C library functions like <code class=\"language-text\">printf</code> all point to some memory address.</p>\n<p>The way that <code class=\"language-text\">call</code> works is that it pushes the return address, or the current value of <code class=\"language-text\">eip</code>, onto the stack and jumps to the argument.</p>\n<p>In other words, this means that <code class=\"language-text\">call &lt;func_addr&gt;</code> is equivalent to:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">push eip\njmp func</code></pre></div>\n<p>What this does is create the <strong>stack frame</strong> which in essence places all the parameters, the return address, and the function itself in the right order on the <strong>stack</strong> so it can execute and return to the caller. Every single function that is called will have its own stack frame, where the base pointer <code class=\"language-text\">ebp</code> contains the start of the stack frame and the <code class=\"language-text\">esp</code> points to the top of the stack frame.</p>\n<p>To call a function with parameters, it would look something like this. This is what <code class=\"language-text\">foo(a, b, c)</code> would look like in x86:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">push c\npush b\npush a\ncall foo</code></pre></div>\n<p>Note that we always push in reverse order since a stack is <strong>LIFO</strong>. Recall that all the parameters are stored on the <strong>stack</strong>. To access them, we can write something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">pop <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">esp</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token operator\">]</span> <span class=\"token comment\">; Return address</span>\npop <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">esp</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token operator\">]</span> <span class=\"token comment\">; Parameter 'a'</span>\npop <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">esp</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token operator\">]</span> <span class=\"token comment\">; Paramater 'b'</span>\npop <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">esp</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token operator\">]</span> <span class=\"token comment\">; Parameter 'c'</span></code></pre></div>\n<p>Realistically, we are missing the stack base-pointer register, which helps us keep track of where the start of the stack frame is located since handling functions without it can be quite messy.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">pop <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">ebp</span> <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token operator\">]</span> <span class=\"token comment\">; Parameter 'c'</span>\npop <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">ebp</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token operator\">]</span> <span class=\"token comment\">; Parameter 'b'</span>\npop <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">ebp</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token operator\">]</span> <span class=\"token comment\">; Parameter 'a'</span>\npop <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">ebp</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token operator\">]</span> <span class=\"token comment\">; Return address</span>\npop <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">ebp</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token operator\">]</span> <span class=\"token comment\">; Saved stack base-pointer register</span></code></pre></div>\n<h2 id=\"leave\">Leave/Ret</h2>\n<p>These two instructions are always used at the end of a given function. The <code class=\"language-text\">leave</code> instruction is always followed by the <code class=\"language-text\">return</code> instruction as seen in disassembling C programs.</p>\n<p>These two instructions make up what we know as today as a single <code class=\"language-text\">return</code> statement in higher level languages like Java or C. They must be used together as they <strong>clean up the stack frame</strong> and <strong>returns to the correct part of the program</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">leave\nret</code></pre></div>\n<p>The <code class=\"language-text\">leave</code> instruction performs the clean up of the stack frame. It:</p>\n<ol>\n<li>Shifts <code class=\"language-text\">esp</code> to where <code class=\"language-text\">ebp</code> is located, which is the base of the stack frame for the current function (callee).</li>\n<li>Pops from the top of the stack into <code class=\"language-text\">ebp</code>, which holds the address of the old stack frame (caller).</li>\n</ol>\n<p>In x86, it is <code class=\"language-text\">leave</code> is equivalent to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">movl <span class=\"token register variable\">ebp</span>, <span class=\"token register variable\">esp</span>\npopl <span class=\"token register variable\">ebp</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/x86/x86-leave.PNG\" alt=\"leave\"></p>\n<p>The <code class=\"language-text\">return</code> instruction takes the value at the top of the stack after <code class=\"language-text\">leave</code> is called, which is the return address to the caller, and pops it into <code class=\"language-text\">esp</code>. In the end, the program continues executing where it left off in the caller function.</p>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/x86/x86-ret.PNG\" alt=\"return\"></p>\n<h2>It's time for me to leave and ret</h2>\n<p>Understanding x86 is crucial in understanding and developing future exploits of your own. I really hope this helped to make x86 seem a little less scary.</p>\n<p>There is, of course, a lot more to learn, but this should lay the groundwork for future research. Have fun!</p>\n<h2 id=\"references\">References</h2>\n<ol>\n<li>\n<p><a href=\"http://www.egr.unlv.edu/~ed/assembly64.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">x86-64 Assembly Language Programming with Ubuntu</a></p>\n</li>\n<li>\n<p><a href=\"https://cs.stanford.edu/people/eroberts/courses/soco/projects/risc/risccisc/\" target=\"_blank\" rel=\"noopener noreferrer\">RISC vs CISC</a></p>\n</li>\n<li>\n<p><a href=\"https://wiki.skullsecurity.org/index.php?title=Registers\" target=\"_blank\" rel=\"noopener noreferrer\">Registers - SkullSecurity</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/1658294/whats-the-purpose-of-the-lea-instruction\" target=\"_blank\" rel=\"noopener noreferrer\">StackOverflow - Purpose of LEA</a></p>\n</li>\n<li>\n<p><a href=\"https://c9x.me/x86/html/file_module_x86_id_35.html\" target=\"_blank\" rel=\"noopener noreferrer\">CMP - Compare Two Operands</a></p>\n</li>\n<li>\n<p><a href=\"http://www.unixwiz.net/techtips/x86-jumps.html\" target=\"_blank\" rel=\"noopener noreferrer\">Intel x86 JUMP quick reference </a></p>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/FLAGS_register\" target=\"_blank\" rel=\"noopener noreferrer\">FLAGS register - Wikipedia</a></p>\n</li>\n</ol>","id":"10cb6ae1-8f38-56a9-9183-36162986243d","fields":{"slug":"/posts/2019-5-16-x86-101/"},"frontmatter":{"date":"2019-05-16T01:50:49.486Z","path":"/x86-101","title":"x86 101","description":"A crash course on x86 to make it less scary.","tags":["programming","asm","x86","systems"]}}},"next":{"node":{"excerpt":"It's July. You've done a lot of the touristy and fun things in Seattle where you are now sitting on your bed, scrolling through the Amazon slack to find stuff to do.You stop at \"Entrepreneurial Intern Event @ Pioneer Square Labs\" and think, this is…","html":"<p>It's July. You've done a lot of the touristy and fun things in Seattle where you are now sitting on your bed, scrolling through the Amazon slack to find stuff to do.</p>\n<p>You stop at \"Entrepreneurial Intern Event @ Pioneer Square Labs\" and think, <em>this is something new</em>. And in bold, <strong>food and drinks provided</strong>.</p>\n<p><em>Hmm...</em></p>\n<h2>Are Meetups Pointless?</h2>\n<p>You know I'm always down for anything that is remotely associated with any free food and drink. With nothing else scheduled, this doesn't seem too bad of an event to attend. It would probably just consist of a bunch of VCs and \"CEOs\" to brag about their successes and poach aspiring developers. The very fact that this is an intern and invite-only event makes it seem that it was only organized to siphon talent from Microsoft, Amazon, etc…</p>\n<p>Looking into Reddit for what these events are like, I found <a href=\"https://www.reddit.com/r/Entrepreneur/comments/5k57y1/rant_i_am_so_tired_of_going_to_entrepreneur/\" target=\"_blank\" rel=\"noopener noreferrer\">this</a>, <a href=\"https://www.reddit.com/r/Entrepreneur/comments/6szd8b/do_real_entrepreneurs_actually_attend_meetups_for/\" target=\"_blank\" rel=\"noopener noreferrer\">this</a>, and <a href=\"https://www.reddit.com/r/Entrepreneur/comments/9uexow/advice_reddit_please/\" target=\"_blank\" rel=\"noopener noreferrer\">this</a>. It seems that these Redditors have far from a favorable view of these entrepreneurial meetups in general, one commenting \"My god, this is the largest group of self-delusional 'wantrepreneurs' I have ever met\".</p>\n<p>Not wanting to be the only one \"networking\", I got another intern on my team to tag along.</p>\n<p>Until now, my knowledge on startups and entrepreneurship just comprised of a hodgepodge of Gary Vaynerchuk videos on YouTube, Silicon Valley, and this <a href=\"https://github.com/words/buzzwords\" target=\"_blank\" rel=\"noopener noreferrer\">handy library</a> of all the obnoxious buzzwords that HR loves to throw around to woo in potential candidates on LinkedIn. In short, not very extensive so I was willing to give it a shot.</p>\n<h2>The Meetup</h2>\n<p>Pioneer Square in Seattle is known to be the city's first settlement, hence the word \"Pioneer\". But over the years, the area has vastly transformed which now features shopping carts filled with trash bags, worn down tents, and your local guy tripping out of his mind.</p>\n<p>In the midst of all this lies a startup studio, <a href=\"https://www.psl.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Pioneer Square Labs</a>. After walking in, an employee quickly escorted us to the third floor where other interns were mingling and drinking copious amounts of  <em>La Croix™</em>. The elevator doors opened to an open office featuring a rugged design mixed with Cedarwood running from the floor to the roof and string lights that came straight out of a college dorm featured on Instagram.</p>\n<p>\"The meetup is to my left\", said one employee as he scooted us to the thing we came for, the pizza.</p>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/pioneer-square-labs/pizza.jpg\" alt=\"The More You Know\"></p>\n<p>There were little clusters of interns mingling about. Some were business and some were software engineering. In general, a good chunk of them come from companies like Microsoft and Amazon along with other startups in the region.</p>\n<p>Once we were satiated with the amount of pizza and drinks we got, the presentation finally began with an \"Omaha\" (forgive me since memory seems to fail me while writing this) which is a tradition they have in encouraging someone to give a speech. In simple terms, it's just cheering exceptionally loud from a much smaller crowd. Cute.</p>\n<p>The very first to speak was a co-founder of the incubator, <a href=\"https://www.psl.com/team/greg-gottesman\" target=\"_blank\" rel=\"noopener noreferrer\">Greg Gottesman</a>, who is also an adjunct professor at the University of Washington teaching entrepreneurship. Having found several successful companies in the past in addition to being a professor, I have no questions about his credibility.</p>\n<p>Up until now, I was only interested in killing some time and getting free food. However, it was at this point where I started to truly listen.</p>\n<p>Soon after, the CEOs of several startups spoke. What I had initially expected was an entire hour of speakers going up and boasting about their successes and throw around a bunch of fancy buzzwords that would attract young developers like myself. However, I could not have been more wrong.</p>\n<p>The main takeaway from what these speakers said was that <em>nothing in life was set in stone</em>. The founder of <strong>Glow</strong>, a platform designed to simplify podcast subscriptions, spoke about her transition from working in the US government to solve a fundamental problem in something she loved. The founder of <strong>SingleFile</strong>, a company aimed to make state and local regulations compliance much easier for starting companies, went from studying law to doing tech. As cheesy and cliche of a saying it is, the future is always full of uncertainties.</p>\n<p>The second part was more of a discussion with two current employees in PSL — one handling business operations and one principal data scientist. One major part of their discussion was about the process of how they vet prospective partnerships with other founders. The one thing that stuck out to me was how much data analysis was involved even in the initial stages of launching something new to prove if something was viable or not.</p>\n<p>A quick rundown of what this process looks like is:</p>\n<ol>\n<li>An initial trial run is created which consisted of many variations of the given idea marketing-wise. This means different variations of landing pages, designs, and marketing campaigns across Facebook and Google ads.</li>\n<li>After some time, the <strong>CTR</strong> (click-through rate) is assessed and a decision is made for continuing the idea. Most ideas that don't do well tend to end here.</li>\n<li>Additional optimizations are made and designs/ideas begin to become a lot more polished.</li>\n<li>Teams start to form where people of PSL meet with the client.</li>\n<li>At this point, the stages start to blur a bit as you meet with different partners (VCs) and begin assembling your team to help build your company.</li>\n</ol>\n<p>I can guarantee you that the process is a lot more nuanced than what I have stated above.</p>\n<p>There were some great examples of ideas that didn't work, such as a radiation detector made from RAM chips. This by softening the memory bits which hold state (0 or 1) by constantly writing and reading them over and over again. The repeated nature of reading and writing is destructive to DRAM (DDR3 and DDR4) and it is very similar to the <a href=\"https://en.wikipedia.org/wiki/Row_hammer\" target=\"_blank\" rel=\"noopener noreferrer\">row hammer</a> method used for modifying bits of memory for privilege escalation. When this idea was tested out, this was only effective in weakening a very minuscule portion of memory, making the production process long and arduous.</p>\n<p>Another idea was paying someone else to pick up packages for you. That in itself opens up a whole other can of worms. Things to take into account are the people that are willing to pay someone, like their neighbor, to accept packages in the first place and security and trust concerns that may arise.</p>\n<p>When it comes to working at a startup studio like this, many positive remarks were made on the flexibility of being able to do the things that they enjoy. For instance, the data scientist stated that he was able to be a \"mad scientist\" of sorts working on a bunch of crazy new ideas and solving complex problems for clients. And these ideas are quite interesting since founders try to be as novel as they possibly can with the problems they try to solve.</p>\n<p>As the event started to wind down, the employees and co-founders \"avuncular\" advice as one put it. The upshot from this part was that even in your early to mid-twenties, it is a great time to try out new ideas and pursue them relentlessly. The time is now to work on that idea for 6 months and see where it goes from there. The time is now to make mistakes so that it would serve as the cornerstone for any prospective startup.</p>\n<p>Although my initial intent was to go there for just the food and drinks, I ended up walking away with greater knowledge on how ideas are usually trialed and all the stages that occur even after an idea is pitched. The very idea that an entrepreneurial course was offered in any school for computer science to me is new given that my school did not have one. I firmly believe that the knowledge that could be gained in such a class teaching this very topic is tantamount to creativity in solving problems and the ability to learn quickly on your feet in this field.</p>\n<p>Despite the antagonistic view that some parts of Reddit had for such events, this one has certainly evinced that they are worthwhile. Who knows, you may meet a future mentor at one of these meetups or hear some profound speech that could have a major impact on the decisions you make later in your lifetime. </p>\n<p><strong>DISCLAIMER</strong>: I am not affiliated with PSL in any shape or form. The thoughts I have expressed here are my own.</p>","id":"19fe6f6c-e0ae-51e3-b80d-ffbc0b4faf29","fields":{"slug":"/posts/2019-8-29-i-was-wrong-about-startup-meetups/"},"frontmatter":{"date":"2019-08-29T11:41:58.971Z","path":"/i-was-wrong-about-startup-meetups","title":"i was wrong about startup meetups","description":"Waste of time or important stepping stone?","tags":["startup","meetup","seattle","psl"]}}}}}}