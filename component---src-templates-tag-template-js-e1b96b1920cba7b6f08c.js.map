{"version":3,"sources":["webpack:///./src/components/Meta/Meta.js","webpack:///./src/components/TagPreview/TagPreview.js","webpack:///./src/templates/tag-template.js"],"names":["Meta","props","title","meta","name","content","description","keywords","property","pathname","url","thumbnail","lang","TagPreview","post","to","frontmatter","path","style","color","fontFamily","fontSize","date","className","borderLeft","fontWeight","marginTop","paddingLeft","timeToRead","excerpt","Tags","posts","data","allMarkdownRemark","edges","tag","pageContext","map","i","node","key","query"],"mappings":"2FAAA,8CA4EeA,IAtEF,SAAAC,GACX,OACE,kBAAC,IAAD,CACEC,MAAOD,EAAMC,MACbC,KAAM,CACJ,CAAEC,KAAM,QAASC,QAASJ,EAAMC,OAEhC,CAAEE,KAAM,cAAeC,QAASJ,EAAMK,aACtC,CAAEF,KAAM,WAAYC,QAAS,uBAAyBJ,EAAMM,UAC5D,CACEC,SAAU,WACVH,QAASJ,EAAMC,OAEjB,CACEM,SAAU,SACVH,QAASJ,EAAMQ,SAAWR,EAAMS,IAAMT,EAAMQ,SAAWR,EAAMS,KAG/D,CACEF,SAAU,WACVH,QAASJ,EAAMU,WAAaV,EAAMU,WAEpC,CACEH,SAAU,sBACVH,QAASJ,EAAMU,WAAaV,EAAMU,WAGpC,CACEH,SAAU,iBACVH,QAASJ,EAAMK,aAGjB,CACEE,SAAU,iBACVH,QAAS,QAGX,CACEG,SAAU,kBACVH,QAAS,OAEX,CACEG,SAAU,YACVH,QAAS,MAEX,CAAED,KAAM,eAAgBC,QAAS,uBAEjC,CAAED,KAAM,gBAAiBC,QAASJ,EAAMC,OAExC,CACEE,KAAM,sBACNC,QAASJ,EAAMK,aAAe,IAMhC,CAAEE,SAAU,UAAWH,QAAS,WAChC,CAAED,KAAM,SAAUC,QAAS,iBAE3B,CAAED,KAAM,kBAAmBC,QAAS,iBACpC,CAAEG,SAAU,eAAgBH,QAAS,aACrC,CAAED,KAAM,WAAYC,QAAS,2EAG/B,0BAAMO,KAAK,U,+GClCFC,G,UA7BI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACjB,6BACE,kBAAC,IAAD,CAAMC,GAAKD,EAAKE,YAAYC,MAAO,4BAAKH,EAAKE,YAAYd,QACzD,wBACEgB,MAAO,CACLC,MAAO,qBACPC,WAAY,aACZC,SAAU,WAGXP,EAAKE,YAAYM,MAEpB,wBACEC,UAAU,OACVL,MAAO,CACLM,WAAY,+BACZL,MAAO,qBACPE,SAAU,SACVI,WAAY,IACZC,UAAW,OACXC,YAAa,WAGdb,EAAKc,WAXR,IAWyC,IAApBd,EAAKc,WAAmB,SAAW,WAExD,2BAAId,EAAKE,YAAYV,aAAeQ,EAAKe,Y,YCjC7C,sCAgCeC,UAzBF,SAAA7B,GACX,IAAM8B,EAAQ9B,EAAM+B,KAAKC,kBAAkBC,MACnCC,EAAQlC,EAAMmC,YAAdD,IAER,OACE,kBAAC,IAAD,KAEE,kBAACnC,EAAA,EAAD,CACIE,MAAK,kBACLI,YAAW,6BAGf,6BACE,mDAA4B6B,EAA5B,KACA,4BAAI,kBAAC,OAAD,CAAMpB,GAAE,SAAR,yBACJ,yBAAKQ,UAAU,QACZQ,EAAMM,KAAI,WAAWC,GAAX,IAAGC,EAAH,EAAGA,KAAH,OACT,kBAAC,EAAD,CAAYzB,KAAOyB,EAAOC,IAAMF,WAjB5C,IA2BaG,EAAK","file":"component---src-templates-tag-template-js-e1b96b1920cba7b6f08c.js","sourcesContent":["/**\r\n * Site metadata for SEO\r\n */\r\nimport React from 'react'\r\nimport Helmet from 'react-helmet'\r\n\r\nconst Meta = props => {\r\n  return (\r\n    <Helmet\r\n      title={props.title}\r\n      meta={[\r\n        { name: 'title', content: props.title },\r\n\r\n        { name: 'description', content: props.description },\r\n        { name: 'keywords', content: 'stanley, lim, blog, ' + props.keywords },\r\n        {\r\n          property: 'og:title',\r\n          content: props.title,\r\n        },\r\n        {\r\n          property: 'og:url',\r\n          content: props.pathname ? props.url + props.pathname : props.url,\r\n        },\r\n\r\n        {\r\n          property: 'og:image',\r\n          content: props.thumbnail && props.thumbnail,\r\n        },\r\n        {\r\n          property: 'og:image:secure_url',\r\n          content: props.thumbnail && props.thumbnail,\r\n        },\r\n\r\n        {\r\n          property: 'og:description',\r\n          content: props.description,\r\n        },\r\n\r\n        {\r\n          property: 'og:image:width',\r\n          content: '1200',\r\n        },\r\n\r\n        {\r\n          property: 'og:image:height',\r\n          content: '630',\r\n        },\r\n        {\r\n          property: 'og:locale',\r\n          content: 'en',\r\n        },\r\n        { name: 'twitter:card', content: 'summary_large_image' },\r\n\r\n        { name: 'twitter:title', content: props.title },\r\n\r\n        {\r\n          name: 'twitter:description',\r\n          content: props.description || '',\r\n        },\r\n        // {\r\n        //   name: 'twitter:image',\r\n        //   content: props.thumbnail && props.thumbnail,\r\n        // },\r\n        { property: 'og:type', content: 'website' },\r\n        { name: 'robots', content: 'index, follow' },\r\n\r\n        { name: 'twitter:creator', content: '@hudididudidi' },\r\n        { property: 'og:site_name', content: 'slim blog' },\r\n        { name: 'viewport', content: 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' }\r\n      ]}\r\n    >\r\n      <html lang=\"en\" />\r\n    </Helmet>\r\n  )\r\n}\r\n\r\nexport default Meta","/**\r\n * Display previews for listing posts by tag\r\n */\r\n\r\nimport React from 'react'\r\nimport Link from 'gatsby-link'\r\nimport styles from './TagPreview.module.scss'\r\n\r\nconst TagPreview = ({ post }) => (\r\n  <div>\r\n    <Link to={ post.frontmatter.path }><h1>{post.frontmatter.title}</h1></Link>\r\n    <h2\r\n      style={{\r\n        color: 'var(--text-normal)',\r\n        fontFamily: 'Montserrat',\r\n        fontSize: '0.9rem',\r\n      }}\r\n    >\r\n      {post.frontmatter.date}\r\n    </h2>\r\n    <h2\r\n      className=\"bold\"\r\n      style={{\r\n        borderLeft: '2px solid var(--text-normal)',\r\n        color: 'var(--text-normal)',\r\n        fontSize: '0.9rem',\r\n        fontWeight: 700,\r\n        marginTop: '0rem',\r\n        paddingLeft: '0.5rem',\r\n      }}\r\n    >\r\n      {post.timeToRead} {post.timeToRead === 1 ? 'minute' : 'minutes'}\r\n    </h2>\r\n    <p>{post.frontmatter.description || post.excerpt}</p>\r\n  </div>\r\n)\r\n\r\nexport default TagPreview\r\n","import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport Layout from '../layouts'\r\nimport TagPreview from '../components/TagPreview/TagPreview';\r\nimport Meta from '../components/Meta/Meta';\r\n\r\nconst Tags = props => {\r\n  const posts = props.data.allMarkdownRemark.edges\r\n  const { tag } = props.pageContext\r\n\r\n  return (\r\n    <Layout>\r\n\r\n      <Meta\r\n          title={ `slim - All Tags` }\r\n          description={ `Display all tags on blog` }\r\n        />\r\n\r\n      <div>\r\n        <h1>{`Available posts in '${tag}'`}</h1>\r\n        <h3><Link to={ `/tags` }>Go back to all tags.</Link></h3>\r\n        <div className=\"tags\">\r\n          {posts.map(({ node }, i) => (\r\n            <TagPreview post={ node } key={ i } />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Tags\r\n\r\nexport const query = graphql`\r\n  query Tagsquery($tag: String!) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { eq: $tag } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt(pruneLength: 250)\r\n          id\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            path\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            description\r\n            tags\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}